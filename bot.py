import logging
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import Config
from rclone_manager import RcloneManager
from token_manager import TokenManager
import os
from drive_manager import DriveManager
import asyncio
import socket
from threading import Thread

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot
app = Client(
    "gdrive_bot",
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    bot_token=Config.BOT_TOKEN
)

rclone_manager = RcloneManager()
token_manager = TokenManager()

# Initialize drive manager
drive_manager = DriveManager()

# TCP Health Check Server
def tcp_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('0.0.0.0', 8080))
    server.listen(1)
    
    while True:
        try:
            client, _ = server.accept()
            client.send(b'OK')
            client.close()
        except:
            pass

# Start TCP server in thread
Thread(target=tcp_server, daemon=True).start()

@app.on_message(filters.command("start"))
async def start_command(client, message: Message):
    text = (
        "ü§ñ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø Google Drive ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ ‡¶¨‡¶ü‡•§\n\n"
        "üìù ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:\n"
        "/rclone - Rclone ‡¶ï‡¶®‡¶´‡¶ø‡¶ó ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n"
        "/token - Token ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (credentials.json ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá)\n"
        "/refresh - Rclone ‡¶ï‡¶®‡¶´‡¶ø‡¶ó ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® (rclone.conf ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá)\n"
        "/clone - Drive ‡¶´‡¶æ‡¶á‡¶≤/‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡ßç‡¶≤‡ßã‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (rclone.conf/token.pickle ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá)"
    )
    await message.reply_text(text)

@app.on_message(filters.command("rclone"))
async def rclone_command(client, message: Message):
    user_id = message.from_user.id
    
    try:
        auth_url = rclone_manager.get_auth_url(user_id)
        
        text = (
            "1Ô∏è‚É£ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n"
            "2Ô∏è‚É£ Google ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n" 
            "3Ô∏è‚É£ Allow ‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n"
            "4Ô∏è‚É£ ‡¶ï‡ßã‡¶° ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá /save <code> ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®"
        )
        
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîë ‡¶Ö‡¶•‡¶∞‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®", url=auth_url)]
        ])
        
        await message.reply_text(text, reply_markup=markup)
        
    except Exception as e:
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

@app.on_message(filters.command("save"))
async def save_command(client, message: Message):
    try:
        user_id = message.from_user.id
        code = message.text.split(None, 1)[1]
        
        # Remove URL parts if present
        if "code=" in code:
            code = code.split("code=")[1].split("&")[0]
        
        success = await rclone_manager.save_token(user_id, code)
        if success:
            # Generate rclone.conf
            config_text = f"""[gdrive]
type = drive
client_id = {Config.RCLONE_CLIENT_ID}
client_secret = {Config.RCLONE_CLIENT_SECRET}
scope = drive
token = {success}
root_folder_id =
team_drive ="""

            with open("rclone.conf", "w") as f:
                f.write(config_text)
                
            await message.reply_document(
                "rclone.conf",
                caption="‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ rclone.conf ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
            )
            os.remove("rclone.conf")
        else:
            await message.reply_text("‚ùå ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!")
            
    except Exception as e:
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

@app.on_message(filters.command("token"))
async def token_command(client, message: Message):
    try:
        if message.reply_to_message and message.reply_to_message.document:
            # Create BytesIO object from document
            file_content = await message.reply_to_message.download(in_memory=True)
            
            # Save to temp file
            with open("temp_cred.json", "wb") as f:
                f.write(file_content.getvalue())  # Convert BytesIO to bytes
            
            # Get auth URL
            auth_url = token_manager.get_auth_url("temp_cred.json")
            
            text = (
                "1Ô∏è‚É£ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                "2Ô∏è‚É£ Google ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                "3Ô∏è‚É£ Allow ‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                "4Ô∏è‚É£ ‡¶ï‡ßã‡¶° ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá /generate <code> ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®"
            )
            
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîë ‡¶Ö‡¶•‡¶∞‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®", url=auth_url)]
            ])
            
            await message.reply_text(text, reply_markup=markup)
            
            # Cleanup
            os.remove("temp_cred.json")
            
        else:
            await message.reply_text("‚ùå credentials.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®!")
            
    except Exception as e:
        if os.path.exists("temp_cred.json"):
            os.remove("temp_cred.json")
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

@app.on_message(filters.command("generate"))
async def generate_command(client, message: Message):
    try:
        code = message.text.split(None, 1)[1]
        
        # Extract code from URL if full URL is provided
        if "code=" in code:
            code = code.split("code=")[1].split("&")[0]
        
        success = await token_manager.generate_token(code)
        
        if success:
            await message.reply_document(
                "token.pickle",
                caption="‚úÖ Token ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
            )
            os.remove("token.pickle")
        else:
            await message.reply_text("‚ùå Token ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!")
            
    except Exception as e:
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

@app.on_message(filters.command("refresh"))
async def refresh_command(client, message: Message):
    try:
        if message.reply_to_message and message.reply_to_message.document:
            # Download rclone.conf
            file_content = await message.reply_to_message.download(in_memory=True)
            
            # Save to temp file
            with open("temp_rclone.conf", "wb") as f:
                f.write(file_content.getvalue())
            
            # Refresh token
            new_token = await rclone_manager.refresh_token("temp_rclone.conf")
            
            if new_token:
                # Generate new rclone.conf
                config_text = f"""[gdrive]
type = drive
client_id = {Config.RCLONE_CLIENT_ID}
client_secret = {Config.RCLONE_CLIENT_SECRET}
scope = drive
token = {new_token}
root_folder_id =
team_drive ="""

                with open("rclone.conf", "w") as f:
                    f.write(config_text)
                    
                await message.reply_document(
                    "rclone.conf",
                    caption="‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá rclone.conf ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
                )
                os.remove("rclone.conf")
            else:
                await message.reply_text("‚ùå ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!")
                
            # Cleanup
            os.remove("temp_rclone.conf")
            
        else:
            await message.reply_text("‚ùå rclone.conf ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®!")
            
    except Exception as e:
        if os.path.exists("temp_rclone.conf"):
            os.remove("temp_rclone.conf")
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

@app.on_message(filters.command("clone"))
async def clone_command(client, message: Message):
    try:
        # Check if files are replied
        if not message.reply_to_message or not message.reply_to_message.document:
            await message.reply_text(
                "‚ùå rclone.conf ‡¶Ö‡¶•‡¶¨‡¶æ token.pickle ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®!"
            )
            return
            
        # Get command arguments
        args = message.text.split()
        if len(args) < 2:
            await message.reply_text("‚ùå Google Drive ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®!")
            return
            
        # Download config file
        file_content = await message.reply_to_message.download(in_memory=True)
        file_name = message.reply_to_message.document.file_name
        
        # Save temp file
        temp_file = "temp_" + file_name
        with open(temp_file, "wb") as f:
            f.write(file_content.getvalue())
            
        # Send status message
        status_msg = await message.reply_text("‚è≥ ‡¶ï‡ßç‡¶≤‡ßã‡¶®‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        
        # Clone file/folder
        result = await drive_manager.clone_file(
            url=args[1],
            rclone_conf=temp_file if file_name.endswith('.conf') else None,
            token_pickle=temp_file if file_name.endswith('.pickle') else None
        )
        
        if result:
            await status_msg.edit_text(
                f"‚úÖ ‡¶ï‡ßç‡¶≤‡ßã‡¶®‡¶ø‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n"
                f"üìÅ ‡¶®‡¶æ‡¶Æ: {result['name']}\n"
                f"üîó ‡¶≤‡¶ø‡¶Ç‡¶ï: {result['link']}"
            )
        else:
            await status_msg.edit_text("‚ùå ‡¶ï‡ßç‡¶≤‡ßã‡¶®‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
            
        # Cleanup
        os.remove(temp_file)
        
    except Exception as e:
        await message.reply_text(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}")

app.run() 